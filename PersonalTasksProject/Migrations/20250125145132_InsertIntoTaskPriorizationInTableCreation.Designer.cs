// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PersonalTasksProject.Context;

#nullable disable

namespace PersonalTasksProject.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250125145132_InsertIntoTaskPriorizationInTableCreation")]
    partial class InsertIntoTaskPriorizationInTableCreation
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PersonalTasksProject.Entities.TaskPriorization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP WITH TIME ZONE")
                        .HasDefaultValue(new DateTime(2025, 1, 25, 14, 51, 32, 200, DateTimeKind.Utc).AddTicks(8144));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP WITH TIME ZONE")
                        .HasDefaultValue(new DateTime(2025, 1, 25, 14, 51, 32, 200, DateTimeKind.Utc).AddTicks(8513));

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("task_priorizations", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 1, 25, 14, 51, 32, 200, DateTimeKind.Utc).AddTicks(8956),
                            Name = "Critical",
                            UpdatedAt = new DateTime(2025, 1, 25, 14, 51, 32, 200, DateTimeKind.Utc).AddTicks(8963)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 1, 25, 14, 51, 32, 200, DateTimeKind.Utc).AddTicks(8969),
                            Name = "High",
                            UpdatedAt = new DateTime(2025, 1, 25, 14, 51, 32, 200, DateTimeKind.Utc).AddTicks(8973)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 1, 25, 14, 51, 32, 200, DateTimeKind.Utc).AddTicks(8977),
                            Name = "Medium",
                            UpdatedAt = new DateTime(2025, 1, 25, 14, 51, 32, 200, DateTimeKind.Utc).AddTicks(8981)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 1, 25, 14, 51, 32, 200, DateTimeKind.Utc).AddTicks(8985),
                            Name = "Low",
                            UpdatedAt = new DateTime(2025, 1, 25, 14, 51, 32, 200, DateTimeKind.Utc).AddTicks(8989)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 1, 25, 14, 51, 32, 200, DateTimeKind.Utc).AddTicks(8993),
                            Name = "None",
                            UpdatedAt = new DateTime(2025, 1, 25, 14, 51, 32, 200, DateTimeKind.Utc).AddTicks(8996)
                        });
                });

            modelBuilder.Entity("PersonalTasksProject.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("UUID");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("VARCHAR(500)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP WITH TIME ZONE")
                        .HasDefaultValue(new DateTime(2025, 1, 25, 14, 51, 32, 200, DateTimeKind.Utc).AddTicks(2274));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("VARCHAR(400)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP WITH TIME ZONE")
                        .HasDefaultValue(new DateTime(2025, 1, 25, 14, 51, 32, 200, DateTimeKind.Utc).AddTicks(2641));

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("USER_IDX_EMAIL");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("PersonalTasksProject.Entities.UserTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("UUID");

                    b.Property<DateOnly?>("CompletionDate")
                        .HasColumnType("DATE");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP WITH TIME ZONE")
                        .HasDefaultValue(new DateTime(2025, 1, 25, 14, 51, 32, 200, DateTimeKind.Utc).AddTicks(4357));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("VARCHAR(1000)");

                    b.Property<DateOnly>("DueDate")
                        .HasColumnType("DATE");

                    b.Property<int>("TaskPriorizationId")
                        .HasColumnType("INT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP WITH TIME ZONE")
                        .HasDefaultValue(new DateTime(2025, 1, 25, 14, 51, 32, 200, DateTimeKind.Utc).AddTicks(4822));

                    b.Property<Guid>("UserId")
                        .HasColumnType("UUID");

                    b.HasKey("Id");

                    b.HasIndex("DueDate")
                        .HasDatabaseName("IDX_TASK_DUE_DATE");

                    b.HasIndex("TaskPriorizationId")
                        .HasDatabaseName("IDX_TASK_PRIORIZATION_ID");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IDX_TASK_USER_ID");

                    b.ToTable("user_tasks", (string)null);
                });

            modelBuilder.Entity("PersonalTasksProject.Entities.UserTask", b =>
                {
                    b.HasOne("PersonalTasksProject.Entities.TaskPriorization", "Status")
                        .WithMany("Tasks")
                        .HasForeignKey("TaskPriorizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TASKS_USERS_PRIORITIES_TASKS");

                    b.HasOne("PersonalTasksProject.Entities.User", "User")
                        .WithMany("Tasks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TASKS_USERS_USERS");

                    b.Navigation("Status");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PersonalTasksProject.Entities.TaskPriorization", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("PersonalTasksProject.Entities.User", b =>
                {
                    b.Navigation("Tasks");
                });
#pragma warning restore 612, 618
        }
    }
}
